if !exists('s:known_links')
  let s:known_links = {}
endif

""" pulled this from https://github.com/altercation/solarized/issues/102#issuecomment-275269574
" the issue is that some colorschemes rip out links, some don't.
function! s:Find_links() " {{{1
  " Find and remember links between highlighting groups.
  redir => listing
  try
    silent highlight
  finally
    redir END
  endtry
  for line in split(listing, "\n")
    let tokens = split(line)
    " We're looking for lines like "String xxx links to Constant" in the
    " output of the :highlight command.
    if len(tokens) == 5 && tokens[1] == 'xxx' && tokens[2] == 'links' && tokens[3] == 'to'
      let fromgroup = tokens[0]
      let togroup = tokens[4]
      let s:known_links[fromgroup] = togroup
    endif
  endfor
endfunction

function! s:Restore_links() " {{{1
  " Restore broken links between highlighting groups.
  redir => listing
  try
    silent highlight
  finally
    redir END
  endtry
  let num_restored = 0
  for line in split(listing, "\n")
    let tokens = split(line)
    " We're looking for lines like "String xxx cleared" in the
    " output of the :highlight command.
    if len(tokens) == 3 && tokens[1] == 'xxx' && tokens[2] == 'cleared'
      let fromgroup = tokens[0]
      let togroup = get(s:known_links, fromgroup, '')
      if !empty(togroup)
        execute 'hi link' fromgroup togroup
        let num_restored += 1
      endif
    endif
  endfor
endfunction

function! s:AccurateColorscheme(colo_name)
  call <SID>Find_links()
  exec "colorscheme " a:colo_name
  call <SID>Restore_links()
endfunction

let s:colorsfiletypes = {
      \ 'vim': 'PaperColor',
      \ 'zsh': 'jellybeans',
      \ 'markdown': 'PaperColor',
      \ 'elixir': 'ayu',
      \ 'exdoc': 'ayu',
      \ 'javascript': 'palenight',
      \ 'javascriptreact': 'palenight',
      \ 'json': 'palenight'
      \ }

autocmd BufWinEnter * call SwitchColors()

let s:lastcolor = 'torte'

function SwitchColors()
  if has_key(s:colorsfiletypes, &filetype)
    let s:lastcolor = s:colorsfiletypes[&filetype]
  endif

  call s:AccurateColorscheme(s:lastcolor)
endfunction

let s:colorsilike = ['OceanicNext', 'one', 'seoul256', 'palenight', 'ayu', 'pink-moon', 'jellybeans', 'gruvbox']
let s:colorsilike_index = 0

function CycleColorsILike()
  let s:colorsilike_index += 1
  echo s:colorsilike[s:colorsilike_index % len(s:colorsilike)]

  let l:nextColor = s:colorsilike[s:colorsilike_index % len(s:colorsilike)]
  call s:AccurateColorscheme(l:nextColor)
endfunction

nnoremap ]c :call CycleColorsILike()<Enter>
nnoremap ]c :call CycleColorsILike()<Enter>

hi link vimLineComment Comment
hi link jsReturn Keyword
